#!/bin/sh
# This must be run from the root of the repo
# This script creates source distributions for all rockspecs in builder/luarocks:
# - It fills in the version and copies it to the right filename luarocks expects
# - It creates a tarball with all the files specified in the rockspec
#
# NOTE: This is not used for external dependencies. Externally hosted rocks
# should be built directly.
# 
# The source builds can be triggered manually by running this **from the repo root**:
# 
#     BUILDER_VERSION=`./build-scripts/gen-version` ./builder/helpers/build-rocks.sh foo.luarock
# 
# Related tools and locations:
# 
# - `helpers/build-rocks.sh`: creates source archives, rockspecs and rocks for all input
#   rockspecs under `builder/rockspecs/`.
#   It expects the version to be available in the `BUILDER_VERSION` env var.
# - `helpers/list-rock-contents.lua`: lists all files that need to be included in the
#   source archive from a rockspec.
# 
# Rules for writing the rockspecs:
# 
# - `__VERSION__` will be replaced by a version string. From the input version
#   (typically generated by `gen-version`), `+` will be replaced by `.` and
#   `-1` will be appended as a rockspec revision, as required by LuaRocks.
# - Only `build.type = 'builtin'` is supported (because of `list-rock-contents.lua`).
# - Only files under `build.modules` and `build.install` will be included in the
#   source tarball. No support for compiled modules.
# 
# To test a built rock, you can do:
# 
#     luarocks install --deps-mode=none --tree /tmp/foo ./builder/tmp/some-package-*.src.rock
# 
# You can check the tree with:
# 
#     tree /tmp/foo
# 
# You can omit `--deps-mode=none` to also install all dependencies. This switch is
# useful when building distribution packages, as you then want to manage dependencies
# in the spec files.
#

# We need the GNU version of tar for --transform
[ -z "$tar" ] && tar=`which gtar tar | grep '^/' | head -1`
if ! $tar --version | grep -q GNU; then
    echo "ERROR: could not find GNU tar (as gtar or tar)"
    echo "On macOS: brew install gnu-tar"
    exit 1
fi

[ -z "$tar_prefix" ] && tar_prefix=dist

set -e

version=`echo "${BUILDER_VERSION:-0.0.0}" | sed 's/[-+]/./'`

build_dir=builder/tmp
[ ! -d "$build_dir" ] && mkdir "$build_dir"

color_reset='\x1B[0m'
color_black='\x1B[1;30m';
color_red='\x1B[1;31m';
color_green='\x1B[1;32m';
color_yellow='\x1B[1;33m';
color_blue='\x1B[1;34m';
color_purple='\x1B[1;35m';
color_cyan='\x1B[1;36m';
color_white='\x1B[1;37m';

luarocks=luarocks-5.1

for rockspec in "$@"; do
    echo
    echo "${color_yellow}* Building rock for $rockspec${color_reset}"
    name=`basename "$rockspec" .rockspec`

    # Generate a rockspec file with version
    outrockspecname="$name-$version-1.rockspec"
    cat "$rockspec" | sed "s/__VERSION__/$version/" > "$build_dir/$outrockspecname"
    echo "Created $build_dir/$outrockspecname"
    #cat "$build_dir/$outrockspecname"
    "$luarocks" lint "$build_dir/$outrockspecname"

    # Archive with all required files
    archive="$build_dir/$name-$version.tar.gz"
    files=`./builder/helpers/list-rock-contents.lua "$rockspec"`
    echo "$files" | sed 's/^/    /'
    "$tar" --transform "s|^|$tar_prefix/|" --dereference -czf "$archive" $files

    # Create rock
    cd "$build_dir"
    "$luarocks" pack "$outrockspecname"
    cd -

    if [ ! -s "$build_dir/$outrockspecname" ]; then
        echo "${color_red}ERROR: It looks like your outdated version of luarocks truncates rockspecs!${color_reset}"
        exit 1
    fi
    echo "${color_green}SUCCESS${color_reset}"
done


